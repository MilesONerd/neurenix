syntax = "proto3";

package neurenix.distributed;

option go_package = "github.com/MilesONerd/neurenix/src/distributed/go/pkg/rpc";

service WorkerService {
  // Register a worker with the coordinator
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse);
  
  // Unregister a worker from the coordinator
  rpc UnregisterWorker(UnregisterWorkerRequest) returns (UnregisterWorkerResponse);
  
  // Send heartbeat from worker to coordinator
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // Stream logs from worker to coordinator
  rpc StreamLogs(stream LogMessage) returns (LogResponse);
  
  // Stream metrics from worker to coordinator
  rpc StreamMetrics(stream MetricMessage) returns (MetricResponse);
}

service CoordinatorService {
  // Assign a task to a worker
  rpc AssignTask(AssignTaskRequest) returns (AssignTaskResponse);
  
  // Get worker status
  rpc GetWorkerStatus(GetWorkerStatusRequest) returns (GetWorkerStatusResponse);
  
  // Stream task updates to worker
  rpc StreamTaskUpdates(TaskUpdateRequest) returns (stream TaskUpdateResponse);
  
  // Bidirectional streaming for real-time communication
  rpc BidirectionalStream(stream StreamRequest) returns (stream StreamResponse);
}

service DataStreamingService {
  // Server streaming for data distribution
  rpc DistributeData(DataRequest) returns (stream DataChunk);
  
  // Client streaming for data collection
  rpc CollectData(stream DataChunk) returns (DataResponse);
  
  // Bidirectional streaming for data processing
  rpc ProcessDataStream(stream ProcessRequest) returns (stream ProcessResponse);
}

// Worker registration
message RegisterWorkerRequest {
  string worker_id = 1;
  string address = 2;
  int32 gpu_count = 3;
  int64 total_ram = 4;
}

message RegisterWorkerResponse {
  bool success = 1;
  string message = 2;
}

// Worker unregistration
message UnregisterWorkerRequest {
  string worker_id = 1;
}

message UnregisterWorkerResponse {
  bool success = 1;
  string message = 2;
}

// Heartbeat
message HeartbeatRequest {
  string worker_id = 1;
  int32 status = 2;
  repeated string running_task_ids = 3;
  int64 available_ram = 4;
}

message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

// Task assignment
message AssignTaskRequest {
  string task_id = 1;
  string task_type = 2;
  string worker_id = 3;
  map<string, string> task_data = 4;
}

message AssignTaskResponse {
  bool success = 1;
  string message = 2;
  map<string, string> result = 3;
}

// Worker status
message GetWorkerStatusRequest {
  string worker_id = 1;
}

message GetWorkerStatusResponse {
  string worker_id = 1;
  int32 status = 2;
  repeated string running_task_ids = 3;
  int64 available_ram = 4;
}

// Streaming messages
message LogMessage {
  string worker_id = 1;
  string log_level = 2;
  string message = 3;
  int64 timestamp = 4;
  string component = 5;
}

message LogResponse {
  bool success = 1;
  int32 received_count = 2;
}

message MetricMessage {
  string worker_id = 1;
  string metric_name = 2;
  double value = 3;
  int64 timestamp = 4;
  map<string, string> labels = 5;
}

message MetricResponse {
  bool success = 1;
  int32 received_count = 2;
}

message TaskUpdateRequest {
  string worker_id = 1;
  string task_id = 2;
}

message TaskUpdateResponse {
  string task_id = 1;
  string update_type = 2;
  map<string, string> update_data = 3;
  int64 timestamp = 4;
}

message StreamRequest {
  string sender_id = 1;
  string message_type = 2;
  bytes payload = 3;
  int64 sequence_number = 4;
}

message StreamResponse {
  string sender_id = 1;
  string message_type = 2;
  bytes payload = 3;
  int64 sequence_number = 4;
  bool requires_ack = 5;
}

// Data streaming messages
message DataRequest {
  string dataset_id = 1;
  int32 batch_size = 2;
  bool shuffle = 3;
  map<string, string> options = 4;
}

message DataChunk {
  string dataset_id = 1;
  int32 chunk_index = 2;
  bytes data = 3;
  string format = 4;
  map<string, string> metadata = 5;
}

message DataResponse {
  bool success = 1;
  int32 chunks_received = 2;
  string dataset_id = 3;
}

message ProcessRequest {
  string process_id = 1;
  string operation = 2;
  bytes input_data = 3;
  map<string, string> parameters = 4;
}

message ProcessResponse {
  string process_id = 1;
  bool success = 2;
  bytes output_data = 3;
  string message = 4;
  map<string, string> metadata = 5;
}
