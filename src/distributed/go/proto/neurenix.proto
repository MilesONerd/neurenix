syntax = "proto3";

package neurenix;

option go_package = "github.com/MilesONerd/framework/src/distributed/go/proto";

// NodeService provides functionality for node management.
service NodeService {
  // RegisterNode registers a node with the coordinator.
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  
  // UnregisterNode unregisters a node from the coordinator.
  rpc UnregisterNode(UnregisterNodeRequest) returns (UnregisterNodeResponse);
  
  // Heartbeat sends a heartbeat from a node to the coordinator.
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // GetNodeInfo gets information about a node.
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse);
}

// TaskService provides functionality for task management.
service TaskService {
  // SubmitTask submits a task to the coordinator.
  rpc SubmitTask(SubmitTaskRequest) returns (SubmitTaskResponse);
  
  // CancelTask cancels a task.
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);
  
  // GetTaskInfo gets information about a task.
  rpc GetTaskInfo(GetTaskInfoRequest) returns (GetTaskInfoResponse);
  
  // UpdateTaskStatus updates the status of a task.
  rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse);
  
  // ExecuteTask executes a task on a worker.
  rpc ExecuteTask(ExecuteTaskRequest) returns (ExecuteTaskResponse);
}

// TrainingService provides functionality for distributed training.
service TrainingService {
  // InitializeTraining initializes distributed training.
  rpc InitializeTraining(InitializeTrainingRequest) returns (InitializeTrainingResponse);
  
  // SynchronizeParameters synchronizes model parameters between workers.
  rpc SynchronizeParameters(SynchronizeParametersRequest) returns (SynchronizeParametersResponse);
  
  // AllReduceGradients performs an all-reduce operation on gradients.
  rpc AllReduceGradients(AllReduceGradientsRequest) returns (AllReduceGradientsResponse);
  
  // BroadcastParameters broadcasts model parameters from the coordinator to all workers.
  rpc BroadcastParameters(BroadcastParametersRequest) returns (BroadcastParametersResponse);
}

// NodeType represents the type of a node.
enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  NODE_TYPE_COORDINATOR = 1;
  NODE_TYPE_WORKER = 2;
}

// NodeStatus represents the status of a node.
enum NodeStatus {
  NODE_STATUS_UNSPECIFIED = 0;
  NODE_STATUS_ONLINE = 1;
  NODE_STATUS_OFFLINE = 2;
  NODE_STATUS_BUSY = 3;
  NODE_STATUS_ERROR = 4;
}

// TaskType represents the type of a task.
enum TaskType {
  TASK_TYPE_UNSPECIFIED = 0;
  TASK_TYPE_TRAINING = 1;
  TASK_TYPE_INFERENCE = 2;
  TASK_TYPE_DATA_PROCESSING = 3;
  TASK_TYPE_CUSTOM = 4;
}

// TaskStatus represents the status of a task.
enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_PENDING = 1;
  TASK_STATUS_RUNNING = 2;
  TASK_STATUS_COMPLETED = 3;
  TASK_STATUS_FAILED = 4;
  TASK_STATUS_CANCELLED = 5;
}

// NodeInfo represents information about a node.
message NodeInfo {
  string id = 1;
  NodeType type = 2;
  NodeStatus status = 3;
  string address = 4;
  int32 gpu_count = 5;
  int64 total_ram = 6;
  int64 avail_ram = 7;
  map<string, string> tags = 8;
  map<string, bytes> attributes = 9;
}

// TaskInfo represents information about a task.
message TaskInfo {
  string id = 1;
  TaskType type = 2;
  TaskStatus status = 3;
  int32 priority = 4;
  repeated string dependencies = 5;
  string assigned_node = 6;
  int64 submit_time = 7;
  int64 start_time = 8;
  int64 end_time = 9;
  int64 timeout = 10;
  int32 retries = 11;
  int32 max_retries = 12;
  map<string, bytes> data = 13;
  map<string, bytes> result = 14;
  string error = 15;
}

// RegisterNodeRequest is the request for RegisterNode.
message RegisterNodeRequest {
  NodeInfo node = 1;
}

// RegisterNodeResponse is the response for RegisterNode.
message RegisterNodeResponse {
  bool success = 1;
  string error = 2;
}

// UnregisterNodeRequest is the request for UnregisterNode.
message UnregisterNodeRequest {
  string node_id = 1;
}

// UnregisterNodeResponse is the response for UnregisterNode.
message UnregisterNodeResponse {
  bool success = 1;
  string error = 2;
}

// HeartbeatRequest is the request for Heartbeat.
message HeartbeatRequest {
  string node_id = 1;
  NodeStatus status = 2;
  int64 timestamp = 3;
  int64 avail_ram = 4;
  map<string, bytes> metrics = 5;
}

// HeartbeatResponse is the response for Heartbeat.
message HeartbeatResponse {
  bool success = 1;
  string error = 2;
}

// GetNodeInfoRequest is the request for GetNodeInfo.
message GetNodeInfoRequest {
  string node_id = 1;
}

// GetNodeInfoResponse is the response for GetNodeInfo.
message GetNodeInfoResponse {
  bool success = 1;
  string error = 2;
  NodeInfo node = 3;
}

// SubmitTaskRequest is the request for SubmitTask.
message SubmitTaskRequest {
  TaskInfo task = 1;
}

// SubmitTaskResponse is the response for SubmitTask.
message SubmitTaskResponse {
  bool success = 1;
  string error = 2;
  string task_id = 3;
}

// CancelTaskRequest is the request for CancelTask.
message CancelTaskRequest {
  string task_id = 1;
}

// CancelTaskResponse is the response for CancelTask.
message CancelTaskResponse {
  bool success = 1;
  string error = 2;
}

// GetTaskInfoRequest is the request for GetTaskInfo.
message GetTaskInfoRequest {
  string task_id = 1;
}

// GetTaskInfoResponse is the response for GetTaskInfo.
message GetTaskInfoResponse {
  bool success = 1;
  string error = 2;
  TaskInfo task = 3;
}

// UpdateTaskStatusRequest is the request for UpdateTaskStatus.
message UpdateTaskStatusRequest {
  string task_id = 1;
  TaskStatus status = 2;
  map<string, bytes> result = 3;
  string error = 4;
}

// UpdateTaskStatusResponse is the response for UpdateTaskStatus.
message UpdateTaskStatusResponse {
  bool success = 1;
  string error = 2;
}

// ExecuteTaskRequest is the request for ExecuteTask.
message ExecuteTaskRequest {
  string task_id = 1;
  TaskType task_type = 2;
  map<string, bytes> data = 3;
}

// ExecuteTaskResponse is the response for ExecuteTask.
message ExecuteTaskResponse {
  bool success = 1;
  string error = 2;
  map<string, bytes> result = 3;
}

// InitializeTrainingRequest is the request for InitializeTraining.
message InitializeTrainingRequest {
  string training_id = 1;
  int32 world_size = 2;
  string backend = 3;
  map<string, bytes> config = 4;
}

// InitializeTrainingResponse is the response for InitializeTraining.
message InitializeTrainingResponse {
  bool success = 1;
  string error = 2;
  int32 rank = 3;
  repeated string worker_addresses = 4;
}

// SynchronizeParametersRequest is the request for SynchronizeParameters.
message SynchronizeParametersRequest {
  string training_id = 1;
  int32 iteration = 2;
  map<string, bytes> parameters = 3;
}

// SynchronizeParametersResponse is the response for SynchronizeParameters.
message SynchronizeParametersResponse {
  bool success = 1;
  string error = 2;
  map<string, bytes> parameters = 3;
}

// AllReduceGradientsRequest is the request for AllReduceGradients.
message AllReduceGradientsRequest {
  string training_id = 1;
  int32 iteration = 2;
  map<string, bytes> gradients = 3;
}

// AllReduceGradientsResponse is the response for AllReduceGradients.
message AllReduceGradientsResponse {
  bool success = 1;
  string error = 2;
  map<string, bytes> gradients = 3;
}

// BroadcastParametersRequest is the request for BroadcastParameters.
message BroadcastParametersRequest {
  string training_id = 1;
  int32 iteration = 2;
  map<string, bytes> parameters = 3;
}

// BroadcastParametersResponse is the response for BroadcastParameters.
message BroadcastParametersResponse {
  bool success = 1;
  string error = 2;
}
